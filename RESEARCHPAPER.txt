This sequence counts the number of unique output sequences for every possible binary Fibonacci linear feedback shift register. 
While developing the sequence, we noticed some interesting properties.
First, every term beyond the 2nd is even. While the sequence uses base 2, there is no obvious reason why all the terms are even, especially when the 2nd term of the sequence is odd. This property holds up to 2^14 terms, but we have not developed a proof up to infinity.
Second, the 2nth term is greater than each preceding term and the is greater than or equal to each following term up to (but not including) the 2n+1th term.
The property that the 2nth term is greater than the preceding terms is intuitive: the 2nth LFSR will have one more stage (i.e. one more bit in the starting seed)
than the (2n-1)th LFSR because 2n has one more digit than 2n-1 when written in binary, so there are twice as many possible states that the 2nth LFSR can be in. 
Furthermore, it makes sense that the 2nth term would be large because the 2nth term represents a simple cycling LFSR, so all output sequences have periods at
most n+1. The property that the 2nth term is greater than or equal to each following term up to 2n+1 is less obvious and requires further analysis. 
So far, we have restricted LFSRs to binary because those are the simplest to work with. However, this type of LSFR can be generalized to any prime base. 
Composite bases don’t work because if the taps of an LSFR aren’t coprime to the base, then the output sequences won’t always return to the starting seed.
When examining the sequences generated by prime bases larger than 2, we discovered the following peculiar property: the sequence alternates between strings 
of even numbers and strings of odd numbers, which get longer as the sequence progresses. For instance, the ternary (base 3) sequence starts with 2 
consecutive odd numbers, then 4 consecutive even numbers, then 12 consecutive odd numbers, then 36 consecutive even numbers, and so on.
When we generated the sequences for primes up to 100, we found that the sequences always switched parity at all numbers with positions of the form s*pk,
where p is the prime base, s is a positive integer less than p, and k ranges from 0 to infinity. For 3, the only value of s is 2, meaning that the sequence 
changes parity at the 2nd, 6th, 18th, 54th, … terms. For 5, the values of s are 2 and 4, so the parity swaps occur at the 2nd, 4th, 10th, 20th, 50th, … terms.
This fact is surprising for two reasons. First, the behavior of the sequence using binary LSFRs, we expected to find mostly even numbers, or mostly numbers 
that are multiples of the base, but neither of those things are true for the other sequences. Second, given that the parity always changes at set multiples 
of powers of the base, we might have expected that the sequence in base 2 wouldn’t change parity at all, but it does at the 1st, 2nd, and 3rd terms of the 
sequence.
After finding all values of s for primes up to 100, we noticed two more properties. The first property is that the smallest value of s and the largest value 
of s always sum to p+1, and so too for the second smallest and the second largest, the third smallest and the third largest, and so on. The second property is
that the number of values of s is always (p+1)/2. Neither of these properties have obvious reasons as to why they should be true.
