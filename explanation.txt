Q. What is this project?
A. This project computes the number of generated output streams for Fibonacci feedback shift registers. Registers of this type work like this: a set of taps is selected

Q. Are there any practical uses?
A. Maybe! Shift registers are important in cryptography and random number generation. We (Avraham Kahan and Mikey Schwartz) have seen all sorts of wierd things
while looking at the sequence, including Walsh Matrices (seen if you manipulate the series of answers generated for a range of taps a certain way), roots for 
irreducible polynomials (the number sequences mirrors closely roots for x^(tap) + x(tap-1)... 1), etc. Its still an open work in progress. See results.txt for 
full mathematical research

Q. Whats with the lookup table? How was this code optimized?
A. In our older versions (olderVersion, and Python version) the program manually converted the numbers to their binary representations as a Linked List.
However, I realized we could precompute the dot-product of the taps and seed mod 2 as just counting the number of 1s and 0s in the number generated from using 
the bitwise AND operator on the taps and seeds. The lookup table precomputes this. That led to a 13X (!) speedup in the run time. It also employs multithreading.
Speeding up the sequence generation for other bases would seem to be signifigantly harder since I can't precompute a lookup table, though I did obtain a 4X speedup just by using C++ instead of Python, and multithreading could add another X(# processors) speedup. 

Q. What does the name mean? "Spanning seeds"?
A. At the beginning we were not sure what exactly this sequence was. One thing this reminded me of was spaces in linear algebra (with the seeds/restarts as the bases of the space), so I named it after that idea. As it turns out, they probably aren't related

Q. Why does the code use mostly features found in C (ex. Arrays instead of vectors)? Why not use C in place of C++ then? 
A. Personally, I find C style to be more readable and less convoluted, and also probably leads to slightly better performance. C++ was only used because its easier to multithread in it. Thats why the program has C style in C++ code


